using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace vector
{
    /// <summary>
    /// Interaction logic for WindowAbout.xaml
    /// </summary>
    public partial class WindowAbout : Window
    {
        private int state;
        public int State
        {
            get { return state; }
            set
            {
                state = value;
                var e = new RoutedEventArgs();
                if (State == 0)
                    buttons_Click(buttonAuth, e);
                else if (State == 1)
                    buttons_Click(buttonData, e);
                else if (State == 2)
                    buttons_Click(buttonMeth, e);
                else if (State == 3)
                    buttons_Click(buttonProg, e);
            }
        }
        public WindowAbout()
        {
            InitializeComponent();
        }

        private void ButtonCommonClick(object sender, RoutedEventArgs e)
        {
            switch ((sender as Button).Name)
            {
                case "ButtonClose":
                    Close();
                    return;
                case "ButtonMaximize":
                    WindowState = WindowState.Maximized;
                    return;
                case "ButtonRestore":
                    WindowState = WindowState.Normal;
                    return;
                case "ButtonMinimize":
                    WindowState = WindowState.Minimized;
                    return;
            }
        }
        private void Window_StateChanged(object sender, EventArgs e)
        {
            switch (this.WindowState)
            {
                case WindowState.Maximized:
                    ButtonMaximize.Visibility = Visibility.Collapsed;
                    ButtonRestore.Visibility = Visibility.Visible;
                    break;
                case WindowState.Normal:
                    ButtonMaximize.Visibility = Visibility.Visible;
                    ButtonRestore.Visibility = Visibility.Collapsed;
                    break;
            }
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            Visibility = Visibility.Collapsed;
        }

        private void buttons_Click(object sender, RoutedEventArgs e)
        {
            Button btn = (Button)sender;
            buttonAuth.IsEnabled = buttonData.IsEnabled = buttonMeth.IsEnabled = buttonProg.IsEnabled = true;
            btn.IsEnabled = false;
            TextBlockTitle.Text = btn.Content.ToString();
            switch (btn.Name)
            {
                case "buttonAuth":
                    TextBlockMain.Text = "Выполнили студенты группы ДКО - 141б:\n" +
                                          "\tИвасюк А. Г.\n" +
                                          "\tМхитарян А. Л.\n" +
                                          "\tРвянин М. О.\n" +
                                          "\tШишков Г. А.\n"; break;
                case "buttonData":
                    TextBlockMain.Text = "В программном средстве входными данными являются:\n" +
                                         "  • количество поставщиков M не менее 2 и не более 100;\n" +
                                         "  • количество потребителей N не менее 2 и не более 100;\n" +
                                         "  • количество продукции поставщиков не более 2147483647;\n" +
                                         "  • количество продукции потребителей не более 2147483647;\n" +
                                         "  • стоимость поставок не более 2147483647;\n" +
                                         "Все перечисленные значения являются численными, неотрицательными,\n" +
                                         "целочисленные и не содержат пробелов, букв и других символов, кроме цифр.\n\n" +
                                         "Входная информация должна быть представлена в виде матрицы.\n\n" +

                                         "Сначала пользователь вводит размерность матрицы. Далее предлагается\n" +
                                         "заполнить матрицу, где синяя горизонтальная строка соответствует\n" +
                                         "спросу потребителей, а синий вертикальный столбец соответствует\n" +
                                         "предложению поставщиков.\n" +
                                         "После ввода данных о спросе потребителей и предложении поставщиков\n" +
                                         "пользователь вводит непосредственно матрицу поставок.\n" +
                                         "В случае загрузки исходных данных из файла файл должен иметь формат.txt.\n" +
                                         "В начале первой строки нужно поставить «0», иначе данные будут\n" +
                                         "считаны неправильно.Далее вводится матрица по строкам, где первая \n" +
                                         "строка – спрос потребителей, первый столбец – предложение поставщиков.\n\n" +

                                         "--------------------------------------------------------------------------\n" +
                                         "Выходная информация на экране представляет собой таблицу,\n" +
                                         "которая хранит базисный план поставок продукции и сообщение, которое\n" +
                                         "выводит базисный план; все ячейки, которые не участвовали в вычислениях,\n" +
                                         "остаются без изменений. Ячейки, которые участвовали в решении задачи,\n" +
                                         "выделяются синим цветом и заполняются Сij(стоимостью поставки)\n" +
                                         "и Xij(объемом поставки), заключенным в скобки.\n\n" +

                                         "Выходная информация в файле представлена в виде матрицы\n" +
                                         "исходных данных и матрицы, которая хранит базисный план поставок,\n" +
                                         "а также посчитанный базисный план(PLbas).\n\n" +

                                         "Если решение было с оптимизацией, то выводится оптимизиованный\n" +
                                         "план поставок и посчитанный оптимизированный план(PLopt).\n\n" +

                                         "Помимо вывода решения транспортной задачи в программном средстве\n" +
                                         "предусмотрен вывод информационных сообщений об ошибках.\n" +
                                         "В случае некорректного ввода размерности матрицы будет выдано\n" +
                                         "сообщение «Размер матрицы должен быть не более 100x100» или\n" +
                                         "«Размер матрицы должен быть не более 2x2»\n\n" +

                                         "В случае неверного формата ввода или отсутствия данных будет выдано\n" +
                                         "сообщение «Матрица должна содержать целые неотрицательные числа».\n\n" +

                                         "Если спрос потребителей не равен предложению поставщиков,\n" +
                                         "то будет выдано сообщение «Сумма продуктов у поставщиков должна\n" +
                                         "быть равно сумме продуктов необходимых потребителям».\n\n" +

                                         "Когда программа считала данные из файла будет выведено\n" +
                                         "сообщение «Файл загружен успешно».\n\n" +

                                         "Если файл не содержит входных данных, то при выводе его на экран\n" +
                                         "будет отображаться собщение «Не удалось загрузить файл»,\n" +
                                         "предупреждающее пользователя о том, что файл поврежден или\n" +
                                         "содержит некорректные данные.\n\n" +

                                         "Также в программном средстве предусмотрен вывод справок для пользователя,\n" +
                                         "если он захочет получить более подробную информацию о программном средстве.\n"; break;
                case "buttonMeth":
                    TextBlockMain.Text = "  Метод Северо-западного угла.\n" +
                                         "При этом способе «поставки» располагаются, начиная\n" +
                                         "от левого верхнего и кончая нижним правым углом матрицы.\n" +
                                         "На географических картах левый верхний угол соответствует северо-западу,\n" +
                                         "эта аналогия и дала название способу.\n" +
                                         " Алгоритм:\n" +
                                         "1.Начинаем подсчет плана поставок с левого верхнего (северо - западного) угла.\n" +
                                         "2.При заполнении двигаемся по строке вправо и по столбцу вниз исходной матрицы.\n" +
                                         "3.В клетку, находящуюся на пересечении строки и столбца,\n" +
                                         "помещается максимально возможное число единиц продукции,\n" +
                                         "разрешенное ограничениями на предложение и спрос: xij = min(ai, bj)\n" +
                                         "4.Если xij = ai, то предложение первого поставщика исчерпано,\n" +
                                         "если xij = bj, то спрос первого потребителя исчерпан, соответственно,\n" +
                                         "вычеркивается или строка, или столбец.\n" +
                                         "5.Переходим к пункту 2 и повторяем 3 - 4.\n" +
                                         "6.Процесс продолжают до тех пор, пока не исчерпается предложение и\n" +
                                         "не удовлетворится спрос.Последняя заполненная клетка\n" +
                                         "находится в последнем столбце и последней строке.\n\n" +
                                         "  Метод Лебедева\n" +
                                         " Алгоритм:\n" +
                                         "1.Считаем среднее арфиметическое Cij для каждой строки начиная с первой;\n" +
                                         "2.Считаем среднее арфиметическое Cij для каждого столбца начиная с первого;\n" +
                                         "3.Каждый элемент Cij вычитается из суммы двух соответствующих средних.\n" +
                                         "4.Производим распределение коэффициентов в соответствии с полученными разностями:\n" +
                                         "сначала в клетку таблицы с наибольшими коэффициентами,\n" +
                                         "далее в следующую за ним по величине и т.д.\n\n" +
                                         "  Метод квадратов\n" +
                                         "Квадратом назовём 4 клетки, расположенные по краям нашего прямоугольника(таблицы).\n" +
                                         "Данный квадрат должен иметь по одной диагонали две положительные поставки.\n" +
                                         "Назовем квадрат неправильным, если сумма двух стоимостей,\n" +
                                         "стоящих в клетках с положительными поставками по одной диагонали\n" +
                                         "больше суммы стоимостей по другой диагонали. Назовем квадрат правильным,\n" +
                                         "если сумма двух стоимостей, стоящих в клетках с положительными поставками\n" +
                                         "меньше суммы двух других стоимостей, стоящих в клетках по другой диагонали.\n" +
                                         "Квадрат - нейтральный, если сумма двух стоимостей, стоящих по одной диагонали\n" +
                                         "равна сумме стоимостей по другой диагонали.";
                    break;
                case "buttonProg":
                    TextBlockMain.Text =
                        "Объем программного средства TransportTask составляет 1191 физических строк.\n" +
                        "ПС состоит из 4 программных модулей.\n" +
                        "В ПС обрабатывается 32 переменных.\n" +
                        "Средняя длительность решения задачи(с учетом ввода) – 1 минута.\n" +
                        "Трудоемкость решения задачи – 88 часов.\n" +
                        "В разработке принимали участие 4 человека.\n" +
                        "Программа реализованна на языке C#"; break;
            }
        }


        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            Top = Owner.Top + 28;
        }
    }
}